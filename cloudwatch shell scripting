vi cloudfront_metrics.sh



#!/bin/bash

# Update packages and install required tools
sudo apt-get update
sudo apt-get install awscli jq -y

# Create a JSON file with metric data queries
cat <<EOF > metric_data_queries.json
[
    {
        "Id": "m1",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "BytesUploaded",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m2",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "BytesDownloaded",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m3",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "Requests",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m4",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "TotalErrorRate",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m5",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "4xxErrorRate",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    }
]
EOF

# Configure AWS CLI
aws configure

# Retrieve metric data and process it using jq
aws cloudwatch get-metric-data \
    --start-time "2023-08-01T00:00:00Z" \
    --end-time "2023-08-11T23:59:59Z" \
    --metric-data-queries file://metric_data_queries.json \
    --output json | jq '.MetricDataResults[] | select(.Label == "BytesDownloaded").Values |= map(. / (1024*1024*1024) | "\(round) GB")'





chmod +x cloudfront_metrics.sh
./cloudfront_metrics.sh



**********************************************************************************************************************************************************************************************************

******************************************************************************************* with json veriable *****************************************************************************************


nano metrics.sh

#!/bin/bash

# JSON data ko direct variable mein store karna
json_data='[
    {
        "Id": "m1",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "BytesUploaded",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m2",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "BytesDownloaded",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m3",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "Requests",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m4",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "TotalErrorRate",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    },
    {
        "Id": "m5",
        "MetricStat": {
            "Metric": {
                "Namespace": "AWS/CloudFront",
                "MetricName": "4xxErrorRate",
                "Dimensions": [
                    { "Name": "Region", "Value": "Global" },
                    { "Name": "DistributionId", "Value": "E3CWZ2DCBC7S0C" }
                ]
            },
            "Period": 604800,
            "Stat": "Sum"
        },
        "ReturnData": true
    }
]'

# Configure AWS CLI
aws configure

# Retrieve metric data and process it using jq
echo "$json_data" | aws cloudwatch get-metric-data \
    --start-time "2023-08-01T00:00:00Z" \
    --end-time "2023-08-11T23:59:59Z" \
    --metric-data-queries file:///dev/stdin \
    --output json | jq '.MetricDataResults[] | select(.Label == "BytesDownloaded").Values |= map(. / (1024*1024*1024) | "\(round) GB")'



chmod +x metrics.sh
./metrics.sh
